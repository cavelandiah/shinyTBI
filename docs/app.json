[{"name":"app.R","content":"#!/usr/bin/env/ Rscript\n\n# Plot box plot\nlibrary(shiny)\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(ggpubr)\n\n## Data\n\n## Transformations to plot\n## min and max based on the log10 Transformations\n## dist = transformation applied\nmin = 0.02\nmax = 3.0\ndist = \"log10\"\n##\n\n# Read complete table\ndata2 <- read_csv(\"all_concatenated.txt\", col_names=T)\n# Add metadata\nmetadata_raw <- read_csv(\"samples_file_shape.csv\", col_names=T)\nmetadata_final = metadata_raw %>% select(c(\"Sample\", \"tto\", \"Concentration\", \"sampleID\"))\ncolnames(metadata_final) = c(\"Cell\", \"TTO\", \"Concentration\", \"Shape_experiment\")\n# Include metadata on main table\ncomplete = merge(data2, metadata_final, by=c(\"Shape_experiment\",\"TTO\"))\ncomplete$Concentration = as.factor(complete$Concentration)\n\n# Convert DMSO values as thresholds\ncontrol_points = complete %>% filter(TTO == \"NAI\")\nthresholds.cell = control_points %>% group_by(Cell) %>% summarise(Threshold=mean(Control_Mutation_rate, na.rm=T))\nthresholds.nt = control_points %>% group_by(Cell, nt) %>% summarise(Threshold=mean(Control_Mutation_rate,na.rm=T))\n# Include thresholds in general by cell\nfinal.cell = merge(complete, thresholds.cell, by=\"Cell\")\n# Include thresholds by cell and nt\nfinal.nt = merge(complete, thresholds.nt, by=c(\"Cell\",\"nt\"))\nfinal.nt = final.nt %>% mutate(union=paste(structure,Cell,sep=\"_\"))\n\n# DMS\nfinal.cell = filter(final.cell, (nt != \"N\" & !is.na(Reactivity)))\nfinal.nt = filter(final.nt, (nt != \"N\" & !is.na(Reactivity)))\n# Plots\ncomparison = c(\"pair\", \"unpair\")\nfinal.nt.hap1 = final.nt %>% filter(Cell == \"HAP1\")\nfinal.nt.ko = final.nt %>% filter(Cell == \"KO\")\n\n# Change to more declarative names\nnames(final.nt)[names(final.nt) == 'nt'] <- 'Nucleotide_position'\nnames(final.nt)[names(final.nt) == 'Shape_experiment'] <- 'Experiment_labels'\nnames(final.nt)[names(final.nt) == 'TTO'] <- 'SHAPE_treatments'\nnames(final.nt)[names(final.nt) == 'seq'] <- 'Nucleotide'\nnames(final.nt)[names(final.nt) == 'ss'] <- 'Secondary_structure'\nnames(final.nt)[names(final.nt) == 'structure'] <- 'Base_pairing'\n\nfinal.nt$Nucleotide_position = as.factor(final.nt$Nucleotide_position)\n# Select numerical columns to plot in the y-axis\nnumerical_columns <- sapply(final.nt, is.numeric)\nnumeric_choices <- colnames(final.nt)[numerical_columns]\nnumeric_choices_selected = c(\"Depth\",\"Mutation_rate\",\"Reactivity\")\n# Categorical columns\ncategorical_col <- sapply(final.nt, function(x) is.factor(x) | is.character(x))\ncategorical_choices <- colnames(final.nt)[categorical_col]\n\nui <- fluidPage(\n  titlePanel(\"In-cellulo SHAPE-map analyses on human cells\"),\n  sidebarLayout(\n    sidebarPanel(\n      # Add checkboxes for TTO, Cell, and Nucleotides\n      checkboxGroupInput(\"tto_selection\", \"Select SHAPE experiment:\", choices = unique(final.nt$SHAPE_treatments), selected=c(\"DMS\",\"NAI\")),\n      checkboxGroupInput(\"cell_selection\", \"Select Cell:\", choices = unique(final.nt$Cell), selected=c(\"HAP1\",\"KO\")),\n      checkboxGroupInput(\"nt_selection\", \"Select Nucleotide:\", choices = unique(final.nt$Nucleotide),selected=c(\"A\",\"G\",\"C\",\"U\")),\n      selectInput(\"x_variable\", \"Choose a variable for x-axis:\", choices = sort(categorical_choices)),\n      selectInput(\"y_variable\", \"Choose a numerical variable for y-axis:\", selected=\"Reactivity\", choices = sort(numeric_choices_selected)),\n      checkboxInput(\"color_plot\", \"Color plots by variable?\", FALSE),\n      conditionalPanel(\n        condition = \"input.color_plot == true\",\n        selectInput(\"color_variable\", \"Choose a variable for coloring:\", choices = sort(categorical_choices))\n      ),\n     helpText(\"Transform y-axis into log10(y-axis)\"),\n     checkboxInput(\"logarithmicY\", \"show y-axis in log10\", TRUE),\n     helpText(\"Add another variable as a new facet\"),\n     checkboxInput(\"facet_checkbox\", \"Add another variable?\", FALSE),\n     conditionalPanel(\n                      condition = \"input.facet_checkbox == true\",\n                      selectInput(\"facet_variable\", \"Choose a variable for facet_grid:\", choices = sort(categorical_choices))\n     ),\n    ),\n    mainPanel(\n      plotOutput(\"boxplot\")\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n    output$boxplot <- renderPlot({\n        gg <- ggplot(final.nt, aes_string(x = input$x_variable, y = input$y_variable))\n        # Filter data based on the selected data_type\n        selected_data <- final.nt %>%\n      filter(SHAPE_treatments %in% input$tto_selection, Cell %in% input$cell_selection, Nucleotide %in% input$nt_selection)\n\n        # Add color aesthetics if selected\n        if (input$color_plot) {\n            gg <- gg + aes_string(fill = input$color_variable)\n        }\n        # Violin plot\n        gg <- gg + geom_violin(data=selected_data, linewidth = 0.1, alpha=0.7,position = position_dodge(0.9))\n\n        gg <- gg + geom_boxplot(data=selected_data,outlier.shape=NA, color=\"black\", position = position_dodge(0.9)) +\n            labs(title = paste(\"Boxplot of\", input$y_variable, \"by\", input$x_variable)) \n        # transformations\n        if(input$logarithmicY){\n            gg <- gg + scale_y_log10()\n        }\n        if(input$facet_checkbox){\n            gg <- gg + facet_grid(~get(input$facet_variable), scales = \"free\", space = \"free\")\n        } \n        gg\n    })\n}\n\n# Run the App\nshinyApp(ui = ui, server = server)\n","type":"text"}]
